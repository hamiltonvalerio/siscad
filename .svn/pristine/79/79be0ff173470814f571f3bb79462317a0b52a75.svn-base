package mb.amazul.siscad.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import mb.amazul.siscad.model.Usuario;
import mb.amazul.siscad.service.UsuarioService;
import mb.amazul.siscad.validator.UsuarioValidator;

@Controller
public class UsuarioController {
	
	@Autowired
	private UsuarioService usuarioService;
	
	@SuppressWarnings("unused")
	@Autowired
	private UsuarioValidator usuarioValidator;
	
	
	@RequestMapping(value= {"/", "/login"}, method=RequestMethod.GET) 
	 public ModelAndView login() {
	  ModelAndView model = new ModelAndView();
	  
	  model.setViewName("user/login");
	  return model;
	 }
	
	@RequestMapping(value= {"/signup"}, method=RequestMethod.GET) 
	 public ModelAndView signup() {
	  ModelAndView model = new ModelAndView();
	  Usuario user = new Usuario();
	  model.addObject("user", user);
	  model.setViewName("user/signup");
	  
	  return model;
	 }
	
	 @RequestMapping(value= {"/signup"}, method=RequestMethod.POST) 
	 public ModelAndView createUser(@Valid Usuario user, BindingResult bindingResult) {
	  ModelAndView model = new ModelAndView();
	  Usuario userExists = usuarioService.findByCpf(user.getCpf());
	  
	  if(userExists != null) {
	   bindingResult.rejectValue("cpf", "error.user", "Este Cpf já está cadastrado!");
	  }
	  if(bindingResult.hasErrors()) {
	   model.setViewName("user/signup");
	  } else {
	   usuarioService.save(user);
	   model.addObject("msg", "Usuário registrado com sucesso!");
	   model.addObject("user", new Usuario());
	   model.setViewName("user/signup");
	  }
	  return model;
	 }
	 
	 @RequestMapping(value= {"/home/home"}, method=RequestMethod.GET) 
	 public ModelAndView home() {
	  ModelAndView model = new ModelAndView();
	  Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	  Usuario user = usuarioService.findByCpf(auth.getName());
	  
	  model.addObject("userName", user.getNome());
	  model.setViewName("home/home");
	  return model;
	 }
	 
	 @RequestMapping(value= {"/access_denied"}, method=RequestMethod.GET) 
	 public ModelAndView accessDenied() {
	  ModelAndView model = new ModelAndView();
	  model.setViewName("errors/access_denied");
	  return model;
	 }
 
}

